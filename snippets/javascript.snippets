snippet bbview
	var ${1} =  Backbone.View.extend({
	  events: {
	  },

	  initialize: function() {
	    _.bindAll(this);
	    this.template = $("");
	  },

	  render: function() {
		this.$el.html(this.template.render(this.model));
	    return this;
	  }
	});

snippet bbmodel
	var ${1} = Backbone.Model.extend({
	  initialize: function() {
	  },

	  defaults: {
	  }
	});
	  
snippet funci
	function(${1}) {
	  ${2}
	}

snippet funcit
	function(${1}) {
	  ${2}
	});

snippet funcitb
	function(${1}) {
	  ${2}
	}.bind(this));

snippet funcj
	${1}: function(${2}) {
	  ${3}
	},

snippet describe
	describe('${1}', () => {
	    ${2}
	});

snippet it
	it('${1}', ()  => {
	  ${2}
	});


snippet ita
	it('${1}', (done) => {
	  ${2}
	  done();
	});


snippet beforeEach
	beforeEach((${1}) => {
	  ${2}
	});


snippet expect
	expect(${1}).to.${2}

snippet forEach
	forEach(function(${1:item}) {
		${2}
	});


snippet clog
	console.log(${1});

snippet objlog
	console.log(require('util').inspect(${1}, {showHidden: false, depth: null}))


snippet clogs
	console.log('${1}');

snippet clogi
	console.log(require('util').inspect('${1}', 0, null));


snippet waterfall
	async.waterfall([
		function(callback) {
			${1}
		},
		function(callback) {
		}],
		function(err) {
		});


snippet require
	var ${1} = require('${2}');



snippet series
	async.series([
		function(callback) {
			${1}
		},
		function(callback) {
		}],
		function(err) {
		});

snippet auto
	async.auto([
		key1: function(callback) {
			${1}
		},
		key2: function(callback) {
		}],
		function(err) {
		});

